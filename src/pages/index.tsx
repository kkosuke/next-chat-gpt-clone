import Head from "next/head";
import { useState } from "react";

import { Configuration, OpenAIApi } from "openai";

const configuration = new Configuration({
  organization: "org-dHK1rMvlVpXrn4sOdZvo6it0",
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

type messagesItem = {
  sender: string;
  text: any;
};

export default function Home() {
  const [text, setText] = useState("");
  const [messages, setMessages] = useState<messagesItem[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    const _text = text;
    setText("");
    setMessages((prevMessages) => [
      ...prevMessages,
      { sender: "user", text: _text },
    ]);
    const response = await openai.createChatCompletion({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: text }],
    });
    setMessages((prevMessages) => [
      ...prevMessages,
      { sender: "ai", text: response.data.choices[0].message?.content },
    ]);

    setIsLoading(false);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="flex flex-col items-center justify-center h-screen">
          <div className="max-w-lg w-full">
            <div
              style={{
                height: "650px",
              }}
              className="bg-gray-100 w-full h-96 overflow-scroll rounded-md"
            >
              <span className="text-center block font-medium text-2xl border-b-2 border-indigo-400 py-4">
                CHAT-GPT Clone
              </span>
              <div className="p-4">
                {messages.map((message, idx) => (
                  <>
                    <div
                      className={
                        message.sender === "user"
                          ? "flex justify-end mb-2"
                          : "flex justify-start mb-2"
                      }
                      key={idx}
                    >
                      <div
                        className={
                          message.sender === "user"
                            ? "bg-indigo-400 text-white p-2 rounded-md"
                            : "bg-gray-200 p-2 rounded-md"
                        }
                      >
                        {message.text}
                      </div>
                    </div>
                  </>
                ))}
              </div>
            </div>
            <form
              className="w-full bg-gray-100 p-2 rounded-b-md"
              onSubmit={(e) => handleSubmit(e)}
            >
              <div className="flex items-center">
                <input
                  type="text"
                  placeholder="質問を入力してください"
                  className="border-2 flex-1 py-2 px-4 rounded-md"
                  onChange={(e) => setText(e.target.value)}
                  value={text}
                />
                <button
                  type="submit"
                  className="p-2 bg-indigo-400 text-white hover:bg-indigo-500 rounded-md ml-1"
                >
                  {isLoading ? "送信中" : "送信"}
                </button>
              </div>
            </form>
          </div>
        </div>
      </main>
    </>
  );
}
